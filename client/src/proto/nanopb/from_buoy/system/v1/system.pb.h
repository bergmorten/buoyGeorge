/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_FROM_BUOY_SYSTEM_V1_FROM_BUOY_SYSTEM_V1_SYSTEM_PB_H_INCLUDED
#define PB_FROM_BUOY_SYSTEM_V1_FROM_BUOY_SYSTEM_V1_SYSTEM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* The system state */
typedef enum _from_buoy_system_v1_Status {
    /* Unknown or not set */
    from_buoy_system_v1_Status_STATUS_UNSPECIFIED = 0,
    /* Working normally */
    from_buoy_system_v1_Status_STATUS_RUNNING = 1,
    /* System is paused by operator */
    from_buoy_system_v1_Status_STATUS_HALTED = 2,
    /* System has been aborted */
    from_buoy_system_v1_Status_STATUS_ABORT = 3
} from_buoy_system_v1_Status;

/* Struct definitions */
/* Dynamic information about status and performance */
typedef struct _from_buoy_system_v1_Performance {
    /* Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
    bool has_seconds_2025;
    uint32_t seconds_2025;
    /* Voltage in 1/100 volts */
    bool has_voltage_100parts;
    uint32_t voltage_100parts;
    /* Current in 1/100 amps */
    bool has_current_100parts;
    uint32_t current_100parts;
    /* Temperature in degrees Celsius */
    bool has_temperature_celsius;
    uint32_t temperature_celsius;
    /* Uptime in seconds since boot */
    bool has_uptime_seconds;
    uint32_t uptime_seconds;
    /* RAM usage in 1/100 percent */
    bool has_ram_percentage_100parts;
    uint32_t ram_percentage_100parts;
    /* CPU usage in 1/100 percent */
    bool has_cpu_usage_percentage_100parts;
    uint32_t cpu_usage_percentage_100parts;
    /* System status */
    from_buoy_system_v1_Status status;
} from_buoy_system_v1_Performance;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _from_buoy_system_v1_Status_MIN from_buoy_system_v1_Status_STATUS_UNSPECIFIED
#define _from_buoy_system_v1_Status_MAX from_buoy_system_v1_Status_STATUS_ABORT
#define _from_buoy_system_v1_Status_ARRAYSIZE ((from_buoy_system_v1_Status)(from_buoy_system_v1_Status_STATUS_ABORT+1))

#define from_buoy_system_v1_Performance_status_ENUMTYPE from_buoy_system_v1_Status


/* Initializer values for message structs */
#define from_buoy_system_v1_Performance_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, _from_buoy_system_v1_Status_MIN}
#define from_buoy_system_v1_Performance_init_zero {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, _from_buoy_system_v1_Status_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define from_buoy_system_v1_Performance_seconds_2025_tag 1
#define from_buoy_system_v1_Performance_voltage_100parts_tag 2
#define from_buoy_system_v1_Performance_current_100parts_tag 3
#define from_buoy_system_v1_Performance_temperature_celsius_tag 4
#define from_buoy_system_v1_Performance_uptime_seconds_tag 5
#define from_buoy_system_v1_Performance_ram_percentage_100parts_tag 6
#define from_buoy_system_v1_Performance_cpu_usage_percentage_100parts_tag 7
#define from_buoy_system_v1_Performance_status_tag 8

/* Struct field encoding specification for nanopb */
#define from_buoy_system_v1_Performance_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   seconds_2025,      1) \
X(a, STATIC,   OPTIONAL, UINT32,   voltage_100parts,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   current_100parts,   3) \
X(a, STATIC,   OPTIONAL, UINT32,   temperature_celsius,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   uptime_seconds,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   ram_percentage_100parts,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   cpu_usage_percentage_100parts,   7) \
X(a, STATIC,   SINGULAR, UENUM,    status,            8)
#define from_buoy_system_v1_Performance_CALLBACK NULL
#define from_buoy_system_v1_Performance_DEFAULT NULL

extern const pb_msgdesc_t from_buoy_system_v1_Performance_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define from_buoy_system_v1_Performance_fields &from_buoy_system_v1_Performance_msg

/* Maximum encoded size of messages (where known) */
#define FROM_BUOY_SYSTEM_V1_FROM_BUOY_SYSTEM_V1_SYSTEM_PB_H_MAX_SIZE from_buoy_system_v1_Performance_size
#define from_buoy_system_v1_Performance_size     44

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
