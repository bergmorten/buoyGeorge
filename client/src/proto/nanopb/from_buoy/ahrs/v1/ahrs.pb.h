/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_FROM_BUOY_AHRS_V1_FROM_BUOY_AHRS_V1_AHRS_PB_H_INCLUDED
#define PB_FROM_BUOY_AHRS_V1_FROM_BUOY_AHRS_V1_AHRS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* AHRS data from sensor XXX */
typedef struct _from_buoy_ahrs_v1_Recording {
    /* Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
    bool has_seconds2025;
    uint32_t seconds2025;
    /* Gyroscope in tenths of degrees per second x axis */
    bool has_gyro_x_10parts;
    int32_t gyro_x_10parts;
    /* Gyroscope in tenths of degrees per second y axis */
    bool has_gyro_y_10parts;
    int32_t gyro_y_10parts;
    /* Gyroscope in tenths of degrees per second z axis */
    bool has_gyro_z_10parts;
    int32_t gyro_z_10parts;
    /* Accelerometer in hundredths of g x axis */
    bool has_accel_x_100parts;
    int32_t accel_x_100parts;
    /* Accelerometer in hundredths of g y axis */
    bool has_accel_y_100parts;
    int32_t accel_y_100parts;
    /* Accelerometer in hundredths of g z axis */
    bool has_accel_z_100parts;
    int32_t accel_z_100parts;
    /* Magnetometer in tenths of microtesla x axis */
    bool has_mag_x_10parts;
    int32_t mag_x_10parts;
    /* Magnetometer in tenths of microtesla y axis */
    bool has_mag_y_10parts;
    int32_t mag_y_10parts;
    /* Magnetometer in tenths of microtesla z axis */
    bool has_mag_z_10parts;
    int32_t mag_z_10parts;
    /* Temperature in tenths of degrees Celsius */
    bool has_temperature_10parts;
    uint32_t temperature_10parts;
    /* Pressure in hundredths of mBar */
    bool has_pressure_100parts;
    uint32_t pressure_100parts;
    /* Heading in hundredths of degrees */
    bool has_heading_100parts;
    int32_t heading_100parts;
    /* Pitch in tenths of degrees */
    bool has_pitch_100parts;
    int32_t pitch_100parts;
    /* Roll in tenths of degrees */
    bool has_roll_100parts;
    int32_t roll_100parts;
    /* Yaw in tenths of degrees */
    bool has_yaw_100parts;
    int32_t yaw_100parts;
} from_buoy_ahrs_v1_Recording;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define from_buoy_ahrs_v1_Recording_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define from_buoy_ahrs_v1_Recording_init_zero    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define from_buoy_ahrs_v1_Recording_seconds2025_tag 1
#define from_buoy_ahrs_v1_Recording_gyro_x_10parts_tag 2
#define from_buoy_ahrs_v1_Recording_gyro_y_10parts_tag 3
#define from_buoy_ahrs_v1_Recording_gyro_z_10parts_tag 4
#define from_buoy_ahrs_v1_Recording_accel_x_100parts_tag 5
#define from_buoy_ahrs_v1_Recording_accel_y_100parts_tag 6
#define from_buoy_ahrs_v1_Recording_accel_z_100parts_tag 7
#define from_buoy_ahrs_v1_Recording_mag_x_10parts_tag 8
#define from_buoy_ahrs_v1_Recording_mag_y_10parts_tag 9
#define from_buoy_ahrs_v1_Recording_mag_z_10parts_tag 10
#define from_buoy_ahrs_v1_Recording_temperature_10parts_tag 11
#define from_buoy_ahrs_v1_Recording_pressure_100parts_tag 12
#define from_buoy_ahrs_v1_Recording_heading_100parts_tag 13
#define from_buoy_ahrs_v1_Recording_pitch_100parts_tag 14
#define from_buoy_ahrs_v1_Recording_roll_100parts_tag 15
#define from_buoy_ahrs_v1_Recording_yaw_100parts_tag 16

/* Struct field encoding specification for nanopb */
#define from_buoy_ahrs_v1_Recording_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   seconds2025,       1) \
X(a, STATIC,   OPTIONAL, SINT32,   gyro_x_10parts,    2) \
X(a, STATIC,   OPTIONAL, SINT32,   gyro_y_10parts,    3) \
X(a, STATIC,   OPTIONAL, SINT32,   gyro_z_10parts,    4) \
X(a, STATIC,   OPTIONAL, SINT32,   accel_x_100parts,   5) \
X(a, STATIC,   OPTIONAL, SINT32,   accel_y_100parts,   6) \
X(a, STATIC,   OPTIONAL, SINT32,   accel_z_100parts,   7) \
X(a, STATIC,   OPTIONAL, SINT32,   mag_x_10parts,     8) \
X(a, STATIC,   OPTIONAL, SINT32,   mag_y_10parts,     9) \
X(a, STATIC,   OPTIONAL, SINT32,   mag_z_10parts,    10) \
X(a, STATIC,   OPTIONAL, UINT32,   temperature_10parts,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   pressure_100parts,  12) \
X(a, STATIC,   OPTIONAL, SINT32,   heading_100parts,  13) \
X(a, STATIC,   OPTIONAL, SINT32,   pitch_100parts,   14) \
X(a, STATIC,   OPTIONAL, SINT32,   roll_100parts,    15) \
X(a, STATIC,   OPTIONAL, SINT32,   yaw_100parts,     16)
#define from_buoy_ahrs_v1_Recording_CALLBACK NULL
#define from_buoy_ahrs_v1_Recording_DEFAULT NULL

extern const pb_msgdesc_t from_buoy_ahrs_v1_Recording_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define from_buoy_ahrs_v1_Recording_fields &from_buoy_ahrs_v1_Recording_msg

/* Maximum encoded size of messages (where known) */
#define FROM_BUOY_AHRS_V1_FROM_BUOY_AHRS_V1_AHRS_PB_H_MAX_SIZE from_buoy_ahrs_v1_Recording_size
#define from_buoy_ahrs_v1_Recording_size         97

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
