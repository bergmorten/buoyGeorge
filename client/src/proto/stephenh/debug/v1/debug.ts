// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: debug/v1/debug.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "debug.v1";

/** Debug message for testing GNSS and Iridium */
export interface Debug {
  /** Message sent UTC Seconds since 2025-01-01T00:00:00Z */
  seconds2025: number;
  /** Iridium start TTS milliseconds */
  iridiumStartTts: number;
  /** milliseconds */
  iridiumPrevMessageTransferTime: number;
  /** 0-5 bars */
  iridiumSignalStrength: number;
  /** milliseconds */
  gnssTimeToFirstFix: number;
  /** number of satellites */
  gnssNumSatellites: number;
  /** 0-5 bars */
  gnssSignalStrengths: number;
  /** Latitude */
  gnssLat: number;
  /** Longitude */
  gnssLon: number;
  /** Altitude */
  gnssAlt: number;
}

function createBaseDebug(): Debug {
  return {
    seconds2025: 0,
    iridiumStartTts: 0,
    iridiumPrevMessageTransferTime: 0,
    iridiumSignalStrength: 0,
    gnssTimeToFirstFix: 0,
    gnssNumSatellites: 0,
    gnssSignalStrengths: 0,
    gnssLat: 0,
    gnssLon: 0,
    gnssAlt: 0,
  };
}

export const Debug: MessageFns<Debug> = {
  encode(message: Debug, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds2025 !== 0) {
      writer.uint32(8).uint32(message.seconds2025);
    }
    if (message.iridiumStartTts !== 0) {
      writer.uint32(16).uint32(message.iridiumStartTts);
    }
    if (message.iridiumPrevMessageTransferTime !== 0) {
      writer.uint32(24).uint32(message.iridiumPrevMessageTransferTime);
    }
    if (message.iridiumSignalStrength !== 0) {
      writer.uint32(32).uint32(message.iridiumSignalStrength);
    }
    if (message.gnssTimeToFirstFix !== 0) {
      writer.uint32(48).uint32(message.gnssTimeToFirstFix);
    }
    if (message.gnssNumSatellites !== 0) {
      writer.uint32(56).uint32(message.gnssNumSatellites);
    }
    if (message.gnssSignalStrengths !== 0) {
      writer.uint32(64).uint32(message.gnssSignalStrengths);
    }
    if (message.gnssLat !== 0) {
      writer.uint32(73).double(message.gnssLat);
    }
    if (message.gnssLon !== 0) {
      writer.uint32(81).double(message.gnssLon);
    }
    if (message.gnssAlt !== 0) {
      writer.uint32(89).double(message.gnssAlt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Debug {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDebug();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds2025 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.iridiumStartTts = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.iridiumPrevMessageTransferTime = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.iridiumSignalStrength = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gnssTimeToFirstFix = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.gnssNumSatellites = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.gnssSignalStrengths = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.gnssLat = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.gnssLon = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.gnssAlt = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Debug {
    return {
      seconds2025: isSet(object.seconds2025) ? globalThis.Number(object.seconds2025) : 0,
      iridiumStartTts: isSet(object.iridiumStartTts) ? globalThis.Number(object.iridiumStartTts) : 0,
      iridiumPrevMessageTransferTime: isSet(object.iridiumPrevMessageTransferTime)
        ? globalThis.Number(object.iridiumPrevMessageTransferTime)
        : 0,
      iridiumSignalStrength: isSet(object.iridiumSignalStrength) ? globalThis.Number(object.iridiumSignalStrength) : 0,
      gnssTimeToFirstFix: isSet(object.gnssTimeToFirstFix) ? globalThis.Number(object.gnssTimeToFirstFix) : 0,
      gnssNumSatellites: isSet(object.gnssNumSatellites) ? globalThis.Number(object.gnssNumSatellites) : 0,
      gnssSignalStrengths: isSet(object.gnssSignalStrengths) ? globalThis.Number(object.gnssSignalStrengths) : 0,
      gnssLat: isSet(object.gnssLat) ? globalThis.Number(object.gnssLat) : 0,
      gnssLon: isSet(object.gnssLon) ? globalThis.Number(object.gnssLon) : 0,
      gnssAlt: isSet(object.gnssAlt) ? globalThis.Number(object.gnssAlt) : 0,
    };
  },

  toJSON(message: Debug): unknown {
    const obj: any = {};
    if (message.seconds2025 !== 0) {
      obj.seconds2025 = Math.round(message.seconds2025);
    }
    if (message.iridiumStartTts !== 0) {
      obj.iridiumStartTts = Math.round(message.iridiumStartTts);
    }
    if (message.iridiumPrevMessageTransferTime !== 0) {
      obj.iridiumPrevMessageTransferTime = Math.round(message.iridiumPrevMessageTransferTime);
    }
    if (message.iridiumSignalStrength !== 0) {
      obj.iridiumSignalStrength = Math.round(message.iridiumSignalStrength);
    }
    if (message.gnssTimeToFirstFix !== 0) {
      obj.gnssTimeToFirstFix = Math.round(message.gnssTimeToFirstFix);
    }
    if (message.gnssNumSatellites !== 0) {
      obj.gnssNumSatellites = Math.round(message.gnssNumSatellites);
    }
    if (message.gnssSignalStrengths !== 0) {
      obj.gnssSignalStrengths = Math.round(message.gnssSignalStrengths);
    }
    if (message.gnssLat !== 0) {
      obj.gnssLat = message.gnssLat;
    }
    if (message.gnssLon !== 0) {
      obj.gnssLon = message.gnssLon;
    }
    if (message.gnssAlt !== 0) {
      obj.gnssAlt = message.gnssAlt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Debug>, I>>(base?: I): Debug {
    return Debug.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Debug>, I>>(object: I): Debug {
    const message = createBaseDebug();
    message.seconds2025 = object.seconds2025 ?? 0;
    message.iridiumStartTts = object.iridiumStartTts ?? 0;
    message.iridiumPrevMessageTransferTime = object.iridiumPrevMessageTransferTime ?? 0;
    message.iridiumSignalStrength = object.iridiumSignalStrength ?? 0;
    message.gnssTimeToFirstFix = object.gnssTimeToFirstFix ?? 0;
    message.gnssNumSatellites = object.gnssNumSatellites ?? 0;
    message.gnssSignalStrengths = object.gnssSignalStrengths ?? 0;
    message.gnssLat = object.gnssLat ?? 0;
    message.gnssLon = object.gnssLon ?? 0;
    message.gnssAlt = object.gnssAlt ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
