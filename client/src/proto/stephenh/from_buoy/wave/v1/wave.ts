// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: from_buoy/wave/v1/wave.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "from_buoy.wave.v1";

/** This a wave profile (measured by GNSS) */
export interface Profile {
  /** Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
  seconds2025?:
    | number
    | undefined;
  /** Significant wave height max 100 parts */
  significantWaveHeightMax100Parts?:
    | number
    | undefined;
  /** Mean wave height max 100 parts */
  meanWaveHeight100Parts?:
    | number
    | undefined;
  /** Mean wave height (BF) max 100 parts */
  meanWaveHeightBf100Parts?:
    | number
    | undefined;
  /** Mean wave height (HF) max 100 parts */
  meanWaveHeightHf100Parts?:
    | number
    | undefined;
  /** Peak wave period 100 parts */
  peakWavePeriod100Parts?:
    | number
    | undefined;
  /** Mean wave period 100 parts */
  meanWavePeriod100Parts?:
    | number
    | undefined;
  /** Peak wave period (BF) 10 parts */
  peakWavePeriodBf10Parts?:
    | number
    | undefined;
  /** Peak wave period (HF) 10 parts */
  peakWavePeriodHf10Parts?:
    | number
    | undefined;
  /** Zero crossing period 100 parts */
  zeroCrossingPeriod100Parts?:
    | number
    | undefined;
  /** Number of waves detected */
  numberOfWaves?:
    | number
    | undefined;
  /** Directional spread 10 parts */
  directionalSpread10Parts?:
    | number
    | undefined;
  /** Maximum period 100 parts */
  maximumPeriod100Parts?:
    | number
    | undefined;
  /** Time at Hmax 10 parts */
  timeAtHmax10Parts?:
    | number
    | undefined;
  /** Height of highest third 100 parts */
  heightOfHighestThird100Parts?:
    | number
    | undefined;
  /** Mean period of highest third 100 parts */
  meanPeriodOfHighestThird100Parts?:
    | number
    | undefined;
  /** Mean direction Tp 10 parts */
  tpMeanDirection10Parts?:
    | number
    | undefined;
  /** Mean direction BF Tp 10 parts */
  tpDirectionBf10Parts?:
    | number
    | undefined;
  /** Mean direction HF Tp 10 parts */
  tpDirectionHf10Parts?:
    | number
    | undefined;
  /** Mean T01 period 10 parts */
  t01MeanPeriod10Parts?:
    | number
    | undefined;
  /** Mean period T02 BF 10 parts */
  t02MeanPeriodBf10Parts?:
    | number
    | undefined;
  /** Mean period T02 HF 10 parts */
  t02MeanPeriodHf10Parts?:
    | number
    | undefined;
  /** Direction T02 BF 10 parts */
  t02DirectionBf10Parts?:
    | number
    | undefined;
  /** Direction T02 HF 10 parts */
  t02DirectionHf10Parts?:
    | number
    | undefined;
  /** Mean direction T02 10 parts */
  t02MeanDirection10Parts?:
    | number
    | undefined;
  /** Raw GNSS data, used when high bandwidth is required link / Cellular */
  rawGnss?: Uint8Array | undefined;
}

function createBaseProfile(): Profile {
  return {
    seconds2025: undefined,
    significantWaveHeightMax100Parts: undefined,
    meanWaveHeight100Parts: undefined,
    meanWaveHeightBf100Parts: undefined,
    meanWaveHeightHf100Parts: undefined,
    peakWavePeriod100Parts: undefined,
    meanWavePeriod100Parts: undefined,
    peakWavePeriodBf10Parts: undefined,
    peakWavePeriodHf10Parts: undefined,
    zeroCrossingPeriod100Parts: undefined,
    numberOfWaves: undefined,
    directionalSpread10Parts: undefined,
    maximumPeriod100Parts: undefined,
    timeAtHmax10Parts: undefined,
    heightOfHighestThird100Parts: undefined,
    meanPeriodOfHighestThird100Parts: undefined,
    tpMeanDirection10Parts: undefined,
    tpDirectionBf10Parts: undefined,
    tpDirectionHf10Parts: undefined,
    t01MeanPeriod10Parts: undefined,
    t02MeanPeriodBf10Parts: undefined,
    t02MeanPeriodHf10Parts: undefined,
    t02DirectionBf10Parts: undefined,
    t02DirectionHf10Parts: undefined,
    t02MeanDirection10Parts: undefined,
    rawGnss: undefined,
  };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds2025 !== undefined) {
      writer.uint32(8).uint32(message.seconds2025);
    }
    if (message.significantWaveHeightMax100Parts !== undefined) {
      writer.uint32(16).uint32(message.significantWaveHeightMax100Parts);
    }
    if (message.meanWaveHeight100Parts !== undefined) {
      writer.uint32(24).uint32(message.meanWaveHeight100Parts);
    }
    if (message.meanWaveHeightBf100Parts !== undefined) {
      writer.uint32(32).uint32(message.meanWaveHeightBf100Parts);
    }
    if (message.meanWaveHeightHf100Parts !== undefined) {
      writer.uint32(40).uint32(message.meanWaveHeightHf100Parts);
    }
    if (message.peakWavePeriod100Parts !== undefined) {
      writer.uint32(48).uint32(message.peakWavePeriod100Parts);
    }
    if (message.meanWavePeriod100Parts !== undefined) {
      writer.uint32(56).uint32(message.meanWavePeriod100Parts);
    }
    if (message.peakWavePeriodBf10Parts !== undefined) {
      writer.uint32(64).uint32(message.peakWavePeriodBf10Parts);
    }
    if (message.peakWavePeriodHf10Parts !== undefined) {
      writer.uint32(72).uint32(message.peakWavePeriodHf10Parts);
    }
    if (message.zeroCrossingPeriod100Parts !== undefined) {
      writer.uint32(80).uint32(message.zeroCrossingPeriod100Parts);
    }
    if (message.numberOfWaves !== undefined) {
      writer.uint32(88).uint32(message.numberOfWaves);
    }
    if (message.directionalSpread10Parts !== undefined) {
      writer.uint32(96).sint32(message.directionalSpread10Parts);
    }
    if (message.maximumPeriod100Parts !== undefined) {
      writer.uint32(104).uint32(message.maximumPeriod100Parts);
    }
    if (message.timeAtHmax10Parts !== undefined) {
      writer.uint32(112).uint32(message.timeAtHmax10Parts);
    }
    if (message.heightOfHighestThird100Parts !== undefined) {
      writer.uint32(120).uint32(message.heightOfHighestThird100Parts);
    }
    if (message.meanPeriodOfHighestThird100Parts !== undefined) {
      writer.uint32(128).uint32(message.meanPeriodOfHighestThird100Parts);
    }
    if (message.tpMeanDirection10Parts !== undefined) {
      writer.uint32(136).sint32(message.tpMeanDirection10Parts);
    }
    if (message.tpDirectionBf10Parts !== undefined) {
      writer.uint32(144).sint32(message.tpDirectionBf10Parts);
    }
    if (message.tpDirectionHf10Parts !== undefined) {
      writer.uint32(152).sint32(message.tpDirectionHf10Parts);
    }
    if (message.t01MeanPeriod10Parts !== undefined) {
      writer.uint32(160).uint32(message.t01MeanPeriod10Parts);
    }
    if (message.t02MeanPeriodBf10Parts !== undefined) {
      writer.uint32(168).uint32(message.t02MeanPeriodBf10Parts);
    }
    if (message.t02MeanPeriodHf10Parts !== undefined) {
      writer.uint32(176).uint32(message.t02MeanPeriodHf10Parts);
    }
    if (message.t02DirectionBf10Parts !== undefined) {
      writer.uint32(184).sint32(message.t02DirectionBf10Parts);
    }
    if (message.t02DirectionHf10Parts !== undefined) {
      writer.uint32(192).sint32(message.t02DirectionHf10Parts);
    }
    if (message.t02MeanDirection10Parts !== undefined) {
      writer.uint32(200).sint32(message.t02MeanDirection10Parts);
    }
    if (message.rawGnss !== undefined) {
      writer.uint32(210).bytes(message.rawGnss);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds2025 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.significantWaveHeightMax100Parts = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.meanWaveHeight100Parts = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.meanWaveHeightBf100Parts = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.meanWaveHeightHf100Parts = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.peakWavePeriod100Parts = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.meanWavePeriod100Parts = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.peakWavePeriodBf10Parts = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.peakWavePeriodHf10Parts = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.zeroCrossingPeriod100Parts = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.numberOfWaves = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.directionalSpread10Parts = reader.sint32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.maximumPeriod100Parts = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.timeAtHmax10Parts = reader.uint32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.heightOfHighestThird100Parts = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.meanPeriodOfHighestThird100Parts = reader.uint32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.tpMeanDirection10Parts = reader.sint32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.tpDirectionBf10Parts = reader.sint32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.tpDirectionHf10Parts = reader.sint32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.t01MeanPeriod10Parts = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.t02MeanPeriodBf10Parts = reader.uint32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.t02MeanPeriodHf10Parts = reader.uint32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.t02DirectionBf10Parts = reader.sint32();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.t02DirectionHf10Parts = reader.sint32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.t02MeanDirection10Parts = reader.sint32();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.rawGnss = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      seconds2025: isSet(object.seconds2025) ? globalThis.Number(object.seconds2025) : undefined,
      significantWaveHeightMax100Parts: isSet(object.significantWaveHeightMax100Parts)
        ? globalThis.Number(object.significantWaveHeightMax100Parts)
        : undefined,
      meanWaveHeight100Parts: isSet(object.meanWaveHeight100Parts)
        ? globalThis.Number(object.meanWaveHeight100Parts)
        : undefined,
      meanWaveHeightBf100Parts: isSet(object.meanWaveHeightBf100Parts)
        ? globalThis.Number(object.meanWaveHeightBf100Parts)
        : undefined,
      meanWaveHeightHf100Parts: isSet(object.meanWaveHeightHf100Parts)
        ? globalThis.Number(object.meanWaveHeightHf100Parts)
        : undefined,
      peakWavePeriod100Parts: isSet(object.peakWavePeriod100Parts)
        ? globalThis.Number(object.peakWavePeriod100Parts)
        : undefined,
      meanWavePeriod100Parts: isSet(object.meanWavePeriod100Parts)
        ? globalThis.Number(object.meanWavePeriod100Parts)
        : undefined,
      peakWavePeriodBf10Parts: isSet(object.peakWavePeriodBf10Parts)
        ? globalThis.Number(object.peakWavePeriodBf10Parts)
        : undefined,
      peakWavePeriodHf10Parts: isSet(object.peakWavePeriodHf10Parts)
        ? globalThis.Number(object.peakWavePeriodHf10Parts)
        : undefined,
      zeroCrossingPeriod100Parts: isSet(object.zeroCrossingPeriod100Parts)
        ? globalThis.Number(object.zeroCrossingPeriod100Parts)
        : undefined,
      numberOfWaves: isSet(object.numberOfWaves) ? globalThis.Number(object.numberOfWaves) : undefined,
      directionalSpread10Parts: isSet(object.directionalSpread10Parts)
        ? globalThis.Number(object.directionalSpread10Parts)
        : undefined,
      maximumPeriod100Parts: isSet(object.maximumPeriod100Parts)
        ? globalThis.Number(object.maximumPeriod100Parts)
        : undefined,
      timeAtHmax10Parts: isSet(object.timeAtHmax10Parts) ? globalThis.Number(object.timeAtHmax10Parts) : undefined,
      heightOfHighestThird100Parts: isSet(object.heightOfHighestThird100Parts)
        ? globalThis.Number(object.heightOfHighestThird100Parts)
        : undefined,
      meanPeriodOfHighestThird100Parts: isSet(object.meanPeriodOfHighestThird100Parts)
        ? globalThis.Number(object.meanPeriodOfHighestThird100Parts)
        : undefined,
      tpMeanDirection10Parts: isSet(object.tpMeanDirection10Parts)
        ? globalThis.Number(object.tpMeanDirection10Parts)
        : undefined,
      tpDirectionBf10Parts: isSet(object.tpDirectionBf10Parts)
        ? globalThis.Number(object.tpDirectionBf10Parts)
        : undefined,
      tpDirectionHf10Parts: isSet(object.tpDirectionHf10Parts)
        ? globalThis.Number(object.tpDirectionHf10Parts)
        : undefined,
      t01MeanPeriod10Parts: isSet(object.t01MeanPeriod10Parts)
        ? globalThis.Number(object.t01MeanPeriod10Parts)
        : undefined,
      t02MeanPeriodBf10Parts: isSet(object.t02MeanPeriodBf10Parts)
        ? globalThis.Number(object.t02MeanPeriodBf10Parts)
        : undefined,
      t02MeanPeriodHf10Parts: isSet(object.t02MeanPeriodHf10Parts)
        ? globalThis.Number(object.t02MeanPeriodHf10Parts)
        : undefined,
      t02DirectionBf10Parts: isSet(object.t02DirectionBf10Parts)
        ? globalThis.Number(object.t02DirectionBf10Parts)
        : undefined,
      t02DirectionHf10Parts: isSet(object.t02DirectionHf10Parts)
        ? globalThis.Number(object.t02DirectionHf10Parts)
        : undefined,
      t02MeanDirection10Parts: isSet(object.t02MeanDirection10Parts)
        ? globalThis.Number(object.t02MeanDirection10Parts)
        : undefined,
      rawGnss: isSet(object.rawGnss) ? bytesFromBase64(object.rawGnss) : undefined,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.seconds2025 !== undefined) {
      obj.seconds2025 = Math.round(message.seconds2025);
    }
    if (message.significantWaveHeightMax100Parts !== undefined) {
      obj.significantWaveHeightMax100Parts = Math.round(message.significantWaveHeightMax100Parts);
    }
    if (message.meanWaveHeight100Parts !== undefined) {
      obj.meanWaveHeight100Parts = Math.round(message.meanWaveHeight100Parts);
    }
    if (message.meanWaveHeightBf100Parts !== undefined) {
      obj.meanWaveHeightBf100Parts = Math.round(message.meanWaveHeightBf100Parts);
    }
    if (message.meanWaveHeightHf100Parts !== undefined) {
      obj.meanWaveHeightHf100Parts = Math.round(message.meanWaveHeightHf100Parts);
    }
    if (message.peakWavePeriod100Parts !== undefined) {
      obj.peakWavePeriod100Parts = Math.round(message.peakWavePeriod100Parts);
    }
    if (message.meanWavePeriod100Parts !== undefined) {
      obj.meanWavePeriod100Parts = Math.round(message.meanWavePeriod100Parts);
    }
    if (message.peakWavePeriodBf10Parts !== undefined) {
      obj.peakWavePeriodBf10Parts = Math.round(message.peakWavePeriodBf10Parts);
    }
    if (message.peakWavePeriodHf10Parts !== undefined) {
      obj.peakWavePeriodHf10Parts = Math.round(message.peakWavePeriodHf10Parts);
    }
    if (message.zeroCrossingPeriod100Parts !== undefined) {
      obj.zeroCrossingPeriod100Parts = Math.round(message.zeroCrossingPeriod100Parts);
    }
    if (message.numberOfWaves !== undefined) {
      obj.numberOfWaves = Math.round(message.numberOfWaves);
    }
    if (message.directionalSpread10Parts !== undefined) {
      obj.directionalSpread10Parts = Math.round(message.directionalSpread10Parts);
    }
    if (message.maximumPeriod100Parts !== undefined) {
      obj.maximumPeriod100Parts = Math.round(message.maximumPeriod100Parts);
    }
    if (message.timeAtHmax10Parts !== undefined) {
      obj.timeAtHmax10Parts = Math.round(message.timeAtHmax10Parts);
    }
    if (message.heightOfHighestThird100Parts !== undefined) {
      obj.heightOfHighestThird100Parts = Math.round(message.heightOfHighestThird100Parts);
    }
    if (message.meanPeriodOfHighestThird100Parts !== undefined) {
      obj.meanPeriodOfHighestThird100Parts = Math.round(message.meanPeriodOfHighestThird100Parts);
    }
    if (message.tpMeanDirection10Parts !== undefined) {
      obj.tpMeanDirection10Parts = Math.round(message.tpMeanDirection10Parts);
    }
    if (message.tpDirectionBf10Parts !== undefined) {
      obj.tpDirectionBf10Parts = Math.round(message.tpDirectionBf10Parts);
    }
    if (message.tpDirectionHf10Parts !== undefined) {
      obj.tpDirectionHf10Parts = Math.round(message.tpDirectionHf10Parts);
    }
    if (message.t01MeanPeriod10Parts !== undefined) {
      obj.t01MeanPeriod10Parts = Math.round(message.t01MeanPeriod10Parts);
    }
    if (message.t02MeanPeriodBf10Parts !== undefined) {
      obj.t02MeanPeriodBf10Parts = Math.round(message.t02MeanPeriodBf10Parts);
    }
    if (message.t02MeanPeriodHf10Parts !== undefined) {
      obj.t02MeanPeriodHf10Parts = Math.round(message.t02MeanPeriodHf10Parts);
    }
    if (message.t02DirectionBf10Parts !== undefined) {
      obj.t02DirectionBf10Parts = Math.round(message.t02DirectionBf10Parts);
    }
    if (message.t02DirectionHf10Parts !== undefined) {
      obj.t02DirectionHf10Parts = Math.round(message.t02DirectionHf10Parts);
    }
    if (message.t02MeanDirection10Parts !== undefined) {
      obj.t02MeanDirection10Parts = Math.round(message.t02MeanDirection10Parts);
    }
    if (message.rawGnss !== undefined) {
      obj.rawGnss = base64FromBytes(message.rawGnss);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.seconds2025 = object.seconds2025 ?? undefined;
    message.significantWaveHeightMax100Parts = object.significantWaveHeightMax100Parts ?? undefined;
    message.meanWaveHeight100Parts = object.meanWaveHeight100Parts ?? undefined;
    message.meanWaveHeightBf100Parts = object.meanWaveHeightBf100Parts ?? undefined;
    message.meanWaveHeightHf100Parts = object.meanWaveHeightHf100Parts ?? undefined;
    message.peakWavePeriod100Parts = object.peakWavePeriod100Parts ?? undefined;
    message.meanWavePeriod100Parts = object.meanWavePeriod100Parts ?? undefined;
    message.peakWavePeriodBf10Parts = object.peakWavePeriodBf10Parts ?? undefined;
    message.peakWavePeriodHf10Parts = object.peakWavePeriodHf10Parts ?? undefined;
    message.zeroCrossingPeriod100Parts = object.zeroCrossingPeriod100Parts ?? undefined;
    message.numberOfWaves = object.numberOfWaves ?? undefined;
    message.directionalSpread10Parts = object.directionalSpread10Parts ?? undefined;
    message.maximumPeriod100Parts = object.maximumPeriod100Parts ?? undefined;
    message.timeAtHmax10Parts = object.timeAtHmax10Parts ?? undefined;
    message.heightOfHighestThird100Parts = object.heightOfHighestThird100Parts ?? undefined;
    message.meanPeriodOfHighestThird100Parts = object.meanPeriodOfHighestThird100Parts ?? undefined;
    message.tpMeanDirection10Parts = object.tpMeanDirection10Parts ?? undefined;
    message.tpDirectionBf10Parts = object.tpDirectionBf10Parts ?? undefined;
    message.tpDirectionHf10Parts = object.tpDirectionHf10Parts ?? undefined;
    message.t01MeanPeriod10Parts = object.t01MeanPeriod10Parts ?? undefined;
    message.t02MeanPeriodBf10Parts = object.t02MeanPeriodBf10Parts ?? undefined;
    message.t02MeanPeriodHf10Parts = object.t02MeanPeriodHf10Parts ?? undefined;
    message.t02DirectionBf10Parts = object.t02DirectionBf10Parts ?? undefined;
    message.t02DirectionHf10Parts = object.t02DirectionHf10Parts ?? undefined;
    message.t02MeanDirection10Parts = object.t02MeanDirection10Parts ?? undefined;
    message.rawGnss = object.rawGnss ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
