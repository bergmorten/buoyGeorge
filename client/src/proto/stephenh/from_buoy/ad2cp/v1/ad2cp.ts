// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: from_buoy/ad2cp/v1/ad2cp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "from_buoy.ad2cp.v1";

/** Values are stored in Delta Zig-Zag coding relative to previous cell */
export interface Cell {
  /** Direction of current in tenths of degrees */
  direction10parts?:
    | number
    | undefined;
  /** Speed of current in hundredths of meters per second */
  velocity100parts?:
    | number
    | undefined;
  /** Amplitude / Strength of signal in tenths of dB */
  amplitude10parts?: number | undefined;
}

/** AD2CP with sensor values and current cell profile */
export interface Profile {
  /** Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
  seconds2025?:
    | number
    | undefined;
  /** Temperature in hundredths of degrees */
  temperature100parts?:
    | number
    | undefined;
  /** Pressure in hundredths of dBar */
  pressure100parts?:
    | number
    | undefined;
  /** Pitch in tenths of degrees */
  pitch10parts?:
    | number
    | undefined;
  /** Roll in tenths of degrees */
  roll10parts?:
    | number
    | undefined;
  /** Velocity scale in hundredths */
  velocityScale?:
    | number
    | undefined;
  /** Cells in the profile */
  cells: Cell[];
  /** Raw AD2CP data, used when high bandwidth is required link / Cellular */
  rawAd2cp?: Uint8Array | undefined;
}

function createBaseCell(): Cell {
  return { direction10parts: undefined, velocity100parts: undefined, amplitude10parts: undefined };
}

export const Cell: MessageFns<Cell> = {
  encode(message: Cell, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.direction10parts !== undefined) {
      writer.uint32(8).sint32(message.direction10parts);
    }
    if (message.velocity100parts !== undefined) {
      writer.uint32(16).sint32(message.velocity100parts);
    }
    if (message.amplitude10parts !== undefined) {
      writer.uint32(24).sint32(message.amplitude10parts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cell {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.direction10parts = reader.sint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.velocity100parts = reader.sint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amplitude10parts = reader.sint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cell {
    return {
      direction10parts: isSet(object.direction10parts) ? globalThis.Number(object.direction10parts) : undefined,
      velocity100parts: isSet(object.velocity100parts) ? globalThis.Number(object.velocity100parts) : undefined,
      amplitude10parts: isSet(object.amplitude10parts) ? globalThis.Number(object.amplitude10parts) : undefined,
    };
  },

  toJSON(message: Cell): unknown {
    const obj: any = {};
    if (message.direction10parts !== undefined) {
      obj.direction10parts = Math.round(message.direction10parts);
    }
    if (message.velocity100parts !== undefined) {
      obj.velocity100parts = Math.round(message.velocity100parts);
    }
    if (message.amplitude10parts !== undefined) {
      obj.amplitude10parts = Math.round(message.amplitude10parts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cell>, I>>(base?: I): Cell {
    return Cell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cell>, I>>(object: I): Cell {
    const message = createBaseCell();
    message.direction10parts = object.direction10parts ?? undefined;
    message.velocity100parts = object.velocity100parts ?? undefined;
    message.amplitude10parts = object.amplitude10parts ?? undefined;
    return message;
  },
};

function createBaseProfile(): Profile {
  return {
    seconds2025: undefined,
    temperature100parts: undefined,
    pressure100parts: undefined,
    pitch10parts: undefined,
    roll10parts: undefined,
    velocityScale: undefined,
    cells: [],
    rawAd2cp: undefined,
  };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds2025 !== undefined) {
      writer.uint32(8).uint32(message.seconds2025);
    }
    if (message.temperature100parts !== undefined) {
      writer.uint32(16).uint32(message.temperature100parts);
    }
    if (message.pressure100parts !== undefined) {
      writer.uint32(24).uint32(message.pressure100parts);
    }
    if (message.pitch10parts !== undefined) {
      writer.uint32(32).sint32(message.pitch10parts);
    }
    if (message.roll10parts !== undefined) {
      writer.uint32(40).sint32(message.roll10parts);
    }
    if (message.velocityScale !== undefined) {
      writer.uint32(48).sint32(message.velocityScale);
    }
    for (const v of message.cells) {
      Cell.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.rawAd2cp !== undefined) {
      writer.uint32(66).bytes(message.rawAd2cp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds2025 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.temperature100parts = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pressure100parts = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pitch10parts = reader.sint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.roll10parts = reader.sint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.velocityScale = reader.sint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.cells.push(Cell.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rawAd2cp = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      seconds2025: isSet(object.seconds2025) ? globalThis.Number(object.seconds2025) : undefined,
      temperature100parts: isSet(object.temperature100parts)
        ? globalThis.Number(object.temperature100parts)
        : undefined,
      pressure100parts: isSet(object.pressure100parts) ? globalThis.Number(object.pressure100parts) : undefined,
      pitch10parts: isSet(object.pitch10parts) ? globalThis.Number(object.pitch10parts) : undefined,
      roll10parts: isSet(object.roll10parts) ? globalThis.Number(object.roll10parts) : undefined,
      velocityScale: isSet(object.velocityScale) ? globalThis.Number(object.velocityScale) : undefined,
      cells: globalThis.Array.isArray(object?.cells) ? object.cells.map((e: any) => Cell.fromJSON(e)) : [],
      rawAd2cp: isSet(object.rawAd2cp) ? bytesFromBase64(object.rawAd2cp) : undefined,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.seconds2025 !== undefined) {
      obj.seconds2025 = Math.round(message.seconds2025);
    }
    if (message.temperature100parts !== undefined) {
      obj.temperature100parts = Math.round(message.temperature100parts);
    }
    if (message.pressure100parts !== undefined) {
      obj.pressure100parts = Math.round(message.pressure100parts);
    }
    if (message.pitch10parts !== undefined) {
      obj.pitch10parts = Math.round(message.pitch10parts);
    }
    if (message.roll10parts !== undefined) {
      obj.roll10parts = Math.round(message.roll10parts);
    }
    if (message.velocityScale !== undefined) {
      obj.velocityScale = Math.round(message.velocityScale);
    }
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => Cell.toJSON(e));
    }
    if (message.rawAd2cp !== undefined) {
      obj.rawAd2cp = base64FromBytes(message.rawAd2cp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.seconds2025 = object.seconds2025 ?? undefined;
    message.temperature100parts = object.temperature100parts ?? undefined;
    message.pressure100parts = object.pressure100parts ?? undefined;
    message.pitch10parts = object.pitch10parts ?? undefined;
    message.roll10parts = object.roll10parts ?? undefined;
    message.velocityScale = object.velocityScale ?? undefined;
    message.cells = object.cells?.map((e) => Cell.fromPartial(e)) || [];
    message.rawAd2cp = object.rawAd2cp ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
