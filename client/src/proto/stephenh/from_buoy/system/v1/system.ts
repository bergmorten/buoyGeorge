// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: from_buoy/system/v1/system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "from_buoy.system.v1";

/** The system state */
export enum Status {
  /** STATUS_UNSPECIFIED - Unknown or not set */
  STATUS_UNSPECIFIED = 0,
  /** STATUS_RUNNING - Working normally */
  STATUS_RUNNING = 1,
  /** STATUS_HALTED - System is paused by operator */
  STATUS_HALTED = 2,
  /** STATUS_ABORT - System has been aborted */
  STATUS_ABORT = 3,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_RUNNING":
      return Status.STATUS_RUNNING;
    case 2:
    case "STATUS_HALTED":
      return Status.STATUS_HALTED;
    case 3:
    case "STATUS_ABORT":
      return Status.STATUS_ABORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Status.STATUS_RUNNING:
      return "STATUS_RUNNING";
    case Status.STATUS_HALTED:
      return "STATUS_HALTED";
    case Status.STATUS_ABORT:
      return "STATUS_ABORT";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Dynamic information about status and performance */
export interface Performance {
  /** Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
  seconds2025?:
    | number
    | undefined;
  /** Voltage in 1/100 volts */
  voltage100parts?:
    | number
    | undefined;
  /** Current in 1/100 amps */
  current100parts?:
    | number
    | undefined;
  /** Temperature in degrees Celsius */
  temperatureCelsius?:
    | number
    | undefined;
  /** Uptime in seconds since boot */
  uptimeSeconds?:
    | number
    | undefined;
  /** RAM usage in 1/100 percent */
  ramPercentage100parts?:
    | number
    | undefined;
  /** CPU usage in 1/100 percent */
  cpuUsagePercentage100parts?:
    | number
    | undefined;
  /** System status */
  status: Status;
}

function createBasePerformance(): Performance {
  return {
    seconds2025: undefined,
    voltage100parts: undefined,
    current100parts: undefined,
    temperatureCelsius: undefined,
    uptimeSeconds: undefined,
    ramPercentage100parts: undefined,
    cpuUsagePercentage100parts: undefined,
    status: 0,
  };
}

export const Performance: MessageFns<Performance> = {
  encode(message: Performance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds2025 !== undefined) {
      writer.uint32(8).uint32(message.seconds2025);
    }
    if (message.voltage100parts !== undefined) {
      writer.uint32(16).uint32(message.voltage100parts);
    }
    if (message.current100parts !== undefined) {
      writer.uint32(24).uint32(message.current100parts);
    }
    if (message.temperatureCelsius !== undefined) {
      writer.uint32(32).uint32(message.temperatureCelsius);
    }
    if (message.uptimeSeconds !== undefined) {
      writer.uint32(40).uint32(message.uptimeSeconds);
    }
    if (message.ramPercentage100parts !== undefined) {
      writer.uint32(48).uint32(message.ramPercentage100parts);
    }
    if (message.cpuUsagePercentage100parts !== undefined) {
      writer.uint32(56).uint32(message.cpuUsagePercentage100parts);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Performance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerformance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds2025 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.voltage100parts = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.current100parts = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.temperatureCelsius = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uptimeSeconds = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ramPercentage100parts = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cpuUsagePercentage100parts = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Performance {
    return {
      seconds2025: isSet(object.seconds2025) ? globalThis.Number(object.seconds2025) : undefined,
      voltage100parts: isSet(object.voltage100parts) ? globalThis.Number(object.voltage100parts) : undefined,
      current100parts: isSet(object.current100parts) ? globalThis.Number(object.current100parts) : undefined,
      temperatureCelsius: isSet(object.temperatureCelsius) ? globalThis.Number(object.temperatureCelsius) : undefined,
      uptimeSeconds: isSet(object.uptimeSeconds) ? globalThis.Number(object.uptimeSeconds) : undefined,
      ramPercentage100parts: isSet(object.ramPercentage100parts)
        ? globalThis.Number(object.ramPercentage100parts)
        : undefined,
      cpuUsagePercentage100parts: isSet(object.cpuUsagePercentage100parts)
        ? globalThis.Number(object.cpuUsagePercentage100parts)
        : undefined,
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Performance): unknown {
    const obj: any = {};
    if (message.seconds2025 !== undefined) {
      obj.seconds2025 = Math.round(message.seconds2025);
    }
    if (message.voltage100parts !== undefined) {
      obj.voltage100parts = Math.round(message.voltage100parts);
    }
    if (message.current100parts !== undefined) {
      obj.current100parts = Math.round(message.current100parts);
    }
    if (message.temperatureCelsius !== undefined) {
      obj.temperatureCelsius = Math.round(message.temperatureCelsius);
    }
    if (message.uptimeSeconds !== undefined) {
      obj.uptimeSeconds = Math.round(message.uptimeSeconds);
    }
    if (message.ramPercentage100parts !== undefined) {
      obj.ramPercentage100parts = Math.round(message.ramPercentage100parts);
    }
    if (message.cpuUsagePercentage100parts !== undefined) {
      obj.cpuUsagePercentage100parts = Math.round(message.cpuUsagePercentage100parts);
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Performance>, I>>(base?: I): Performance {
    return Performance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Performance>, I>>(object: I): Performance {
    const message = createBasePerformance();
    message.seconds2025 = object.seconds2025 ?? undefined;
    message.voltage100parts = object.voltage100parts ?? undefined;
    message.current100parts = object.current100parts ?? undefined;
    message.temperatureCelsius = object.temperatureCelsius ?? undefined;
    message.uptimeSeconds = object.uptimeSeconds ?? undefined;
    message.ramPercentage100parts = object.ramPercentage100parts ?? undefined;
    message.cpuUsagePercentage100parts = object.cpuUsagePercentage100parts ?? undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
