// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: from_buoy/manifest/v1/manifest.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "from_buoy.manifest.v1";

/** The main board is installed */
export enum CPU {
  /** CPU_UNSPECIFIED - Unknown CPU type */
  CPU_UNSPECIFIED = 0,
  UNRECOGNIZED = -1,
}

export function cPUFromJSON(object: any): CPU {
  switch (object) {
    case 0:
    case "CPU_UNSPECIFIED":
      return CPU.CPU_UNSPECIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CPU.UNRECOGNIZED;
  }
}

export function cPUToJSON(object: CPU): string {
  switch (object) {
    case CPU.CPU_UNSPECIFIED:
      return "CPU_UNSPECIFIED";
    case CPU.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Which communications board is installed? */
export enum Comms {
  /** COMMS_UNSPECIFIED - UNKNOWN COMMUNICATIONS TYPE */
  COMMS_UNSPECIFIED = 0,
  /** COMMS_ROCKBLOCK_9704 - ROCKBLOCK 9704 COMMUNICATIONS TYPE */
  COMMS_ROCKBLOCK_9704 = 1,
  /** COMMS_ROCKBLOCK_9703 - ROCKBLOCK 9703 COMMUNICATIONS TYPE */
  COMMS_ROCKBLOCK_9703 = 2,
  /** COMMS_QUALCOMM_315 - QUALCOMM 315 COMMUNICATIONS TYPE */
  COMMS_QUALCOMM_315 = 3,
  /** COMMS_NRF9160 - NRF9160 COMMUNICATIONS TYPE */
  COMMS_NRF9160 = 4,
  UNRECOGNIZED = -1,
}

export function commsFromJSON(object: any): Comms {
  switch (object) {
    case 0:
    case "COMMS_UNSPECIFIED":
      return Comms.COMMS_UNSPECIFIED;
    case 1:
    case "COMMS_ROCKBLOCK_9704":
      return Comms.COMMS_ROCKBLOCK_9704;
    case 2:
    case "COMMS_ROCKBLOCK_9703":
      return Comms.COMMS_ROCKBLOCK_9703;
    case 3:
    case "COMMS_QUALCOMM_315":
      return Comms.COMMS_QUALCOMM_315;
    case 4:
    case "COMMS_NRF9160":
      return Comms.COMMS_NRF9160;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Comms.UNRECOGNIZED;
  }
}

export function commsToJSON(object: Comms): string {
  switch (object) {
    case Comms.COMMS_UNSPECIFIED:
      return "COMMS_UNSPECIFIED";
    case Comms.COMMS_ROCKBLOCK_9704:
      return "COMMS_ROCKBLOCK_9704";
    case Comms.COMMS_ROCKBLOCK_9703:
      return "COMMS_ROCKBLOCK_9703";
    case Comms.COMMS_QUALCOMM_315:
      return "COMMS_QUALCOMM_315";
    case Comms.COMMS_NRF9160:
      return "COMMS_NRF9160";
    case Comms.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The GNSS board is installed */
export enum GNSS {
  /** GNSS_UNSPECIFIED - UNKNOWN GNSS TYPE */
  GNSS_UNSPECIFIED = 0,
  /** GNSS_UBLOX_NEO_F9P - UBLOX NEO-F9P GNSS TYPE */
  GNSS_UBLOX_NEO_F9P = 1,
  /** GNSS_UBLOX_ZED_F9P - UBLOX ZED-F9P GNSS TYPE */
  GNSS_UBLOX_ZED_F9P = 2,
  /** GNSS_UBLOX_ZED_X209P - UBLOX ZED-X209P GNSS TYPE */
  GNSS_UBLOX_ZED_X209P = 3,
  UNRECOGNIZED = -1,
}

export function gNSSFromJSON(object: any): GNSS {
  switch (object) {
    case 0:
    case "GNSS_UNSPECIFIED":
      return GNSS.GNSS_UNSPECIFIED;
    case 1:
    case "GNSS_UBLOX_NEO_F9P":
      return GNSS.GNSS_UBLOX_NEO_F9P;
    case 2:
    case "GNSS_UBLOX_ZED_F9P":
      return GNSS.GNSS_UBLOX_ZED_F9P;
    case 3:
    case "GNSS_UBLOX_ZED_X209P":
      return GNSS.GNSS_UBLOX_ZED_X209P;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GNSS.UNRECOGNIZED;
  }
}

export function gNSSToJSON(object: GNSS): string {
  switch (object) {
    case GNSS.GNSS_UNSPECIFIED:
      return "GNSS_UNSPECIFIED";
    case GNSS.GNSS_UBLOX_NEO_F9P:
      return "GNSS_UBLOX_NEO_F9P";
    case GNSS.GNSS_UBLOX_ZED_F9P:
      return "GNSS_UBLOX_ZED_F9P";
    case GNSS.GNSS_UBLOX_ZED_X209P:
      return "GNSS_UBLOX_ZED_X209P";
    case GNSS.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Identity and manifest of the system. Transferred on boot or command */
export interface Manifest {
  /** Serial number of the system */
  serialNumber?:
    | string
    | undefined;
  /** Firmware version string */
  firmwareVersion?:
    | string
    | undefined;
  /** CPU model / Board */
  cpu?:
    | CPU
    | undefined;
  /** GNSS model / Board */
  gnss?:
    | GNSS
    | undefined;
  /** Communications model / Board */
  comms: Comms[];
  /** The manifest (JSON encoded) */
  manifest?: string | undefined;
}

function createBaseManifest(): Manifest {
  return {
    serialNumber: undefined,
    firmwareVersion: undefined,
    cpu: undefined,
    gnss: undefined,
    comms: [],
    manifest: undefined,
  };
}

export const Manifest: MessageFns<Manifest> = {
  encode(message: Manifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serialNumber !== undefined) {
      writer.uint32(10).string(message.serialNumber);
    }
    if (message.firmwareVersion !== undefined) {
      writer.uint32(18).string(message.firmwareVersion);
    }
    if (message.cpu !== undefined) {
      writer.uint32(24).int32(message.cpu);
    }
    if (message.gnss !== undefined) {
      writer.uint32(32).int32(message.gnss);
    }
    writer.uint32(42).fork();
    for (const v of message.comms) {
      writer.int32(v);
    }
    writer.join();
    if (message.manifest !== undefined) {
      writer.uint32(50).string(message.manifest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Manifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManifest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serialNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firmwareVersion = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.cpu = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gnss = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.comms.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.comms.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.manifest = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Manifest {
    return {
      serialNumber: isSet(object.serialNumber) ? globalThis.String(object.serialNumber) : undefined,
      firmwareVersion: isSet(object.firmwareVersion) ? globalThis.String(object.firmwareVersion) : undefined,
      cpu: isSet(object.cpu) ? cPUFromJSON(object.cpu) : undefined,
      gnss: isSet(object.gnss) ? gNSSFromJSON(object.gnss) : undefined,
      comms: globalThis.Array.isArray(object?.comms) ? object.comms.map((e: any) => commsFromJSON(e)) : [],
      manifest: isSet(object.manifest) ? globalThis.String(object.manifest) : undefined,
    };
  },

  toJSON(message: Manifest): unknown {
    const obj: any = {};
    if (message.serialNumber !== undefined) {
      obj.serialNumber = message.serialNumber;
    }
    if (message.firmwareVersion !== undefined) {
      obj.firmwareVersion = message.firmwareVersion;
    }
    if (message.cpu !== undefined) {
      obj.cpu = cPUToJSON(message.cpu);
    }
    if (message.gnss !== undefined) {
      obj.gnss = gNSSToJSON(message.gnss);
    }
    if (message.comms?.length) {
      obj.comms = message.comms.map((e) => commsToJSON(e));
    }
    if (message.manifest !== undefined) {
      obj.manifest = message.manifest;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Manifest>, I>>(base?: I): Manifest {
    return Manifest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Manifest>, I>>(object: I): Manifest {
    const message = createBaseManifest();
    message.serialNumber = object.serialNumber ?? undefined;
    message.firmwareVersion = object.firmwareVersion ?? undefined;
    message.cpu = object.cpu ?? undefined;
    message.gnss = object.gnss ?? undefined;
    message.comms = object.comms?.map((e) => e) || [];
    message.manifest = object.manifest ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
