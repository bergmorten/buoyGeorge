// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: from_buoy/ahrs/v1/ahrs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "from_buoy.ahrs.v1";

/** AHRS data from sensor XXX */
export interface Recording {
  /** Recorded at UTC Seconds since 2025-01-01T00:00:00Z */
  seconds2025?:
    | number
    | undefined;
  /** Gyroscope in tenths of degrees per second x axis */
  gyroX10parts?:
    | number
    | undefined;
  /** Gyroscope in tenths of degrees per second y axis */
  gyroY10parts?:
    | number
    | undefined;
  /** Gyroscope in tenths of degrees per second z axis */
  gyroZ10parts?:
    | number
    | undefined;
  /** Accelerometer in hundredths of g x axis */
  accelX100parts?:
    | number
    | undefined;
  /** Accelerometer in hundredths of g y axis */
  accelY100parts?:
    | number
    | undefined;
  /** Accelerometer in hundredths of g z axis */
  accelZ100parts?:
    | number
    | undefined;
  /** Magnetometer in tenths of microtesla x axis */
  magX10parts?:
    | number
    | undefined;
  /** Magnetometer in tenths of microtesla y axis */
  magY10parts?:
    | number
    | undefined;
  /** Magnetometer in tenths of microtesla z axis */
  magZ10parts?:
    | number
    | undefined;
  /** Temperature in tenths of degrees Celsius */
  temperature10parts?:
    | number
    | undefined;
  /** Pressure in hundredths of mBar */
  pressure100parts?:
    | number
    | undefined;
  /** Heading in hundredths of degrees */
  heading100parts?:
    | number
    | undefined;
  /** Pitch in tenths of degrees */
  pitch100parts?:
    | number
    | undefined;
  /** Roll in tenths of degrees */
  roll100parts?:
    | number
    | undefined;
  /** Yaw in tenths of degrees */
  yaw100parts?: number | undefined;
}

function createBaseRecording(): Recording {
  return {
    seconds2025: undefined,
    gyroX10parts: undefined,
    gyroY10parts: undefined,
    gyroZ10parts: undefined,
    accelX100parts: undefined,
    accelY100parts: undefined,
    accelZ100parts: undefined,
    magX10parts: undefined,
    magY10parts: undefined,
    magZ10parts: undefined,
    temperature10parts: undefined,
    pressure100parts: undefined,
    heading100parts: undefined,
    pitch100parts: undefined,
    roll100parts: undefined,
    yaw100parts: undefined,
  };
}

export const Recording: MessageFns<Recording> = {
  encode(message: Recording, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seconds2025 !== undefined) {
      writer.uint32(8).uint32(message.seconds2025);
    }
    if (message.gyroX10parts !== undefined) {
      writer.uint32(16).sint32(message.gyroX10parts);
    }
    if (message.gyroY10parts !== undefined) {
      writer.uint32(24).sint32(message.gyroY10parts);
    }
    if (message.gyroZ10parts !== undefined) {
      writer.uint32(32).sint32(message.gyroZ10parts);
    }
    if (message.accelX100parts !== undefined) {
      writer.uint32(40).sint32(message.accelX100parts);
    }
    if (message.accelY100parts !== undefined) {
      writer.uint32(48).sint32(message.accelY100parts);
    }
    if (message.accelZ100parts !== undefined) {
      writer.uint32(56).sint32(message.accelZ100parts);
    }
    if (message.magX10parts !== undefined) {
      writer.uint32(64).sint32(message.magX10parts);
    }
    if (message.magY10parts !== undefined) {
      writer.uint32(72).sint32(message.magY10parts);
    }
    if (message.magZ10parts !== undefined) {
      writer.uint32(80).sint32(message.magZ10parts);
    }
    if (message.temperature10parts !== undefined) {
      writer.uint32(88).uint32(message.temperature10parts);
    }
    if (message.pressure100parts !== undefined) {
      writer.uint32(96).uint32(message.pressure100parts);
    }
    if (message.heading100parts !== undefined) {
      writer.uint32(104).sint32(message.heading100parts);
    }
    if (message.pitch100parts !== undefined) {
      writer.uint32(112).sint32(message.pitch100parts);
    }
    if (message.roll100parts !== undefined) {
      writer.uint32(120).sint32(message.roll100parts);
    }
    if (message.yaw100parts !== undefined) {
      writer.uint32(128).sint32(message.yaw100parts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Recording {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecording();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seconds2025 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gyroX10parts = reader.sint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gyroY10parts = reader.sint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gyroZ10parts = reader.sint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.accelX100parts = reader.sint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.accelY100parts = reader.sint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.accelZ100parts = reader.sint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.magX10parts = reader.sint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.magY10parts = reader.sint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.magZ10parts = reader.sint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.temperature10parts = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.pressure100parts = reader.uint32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.heading100parts = reader.sint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.pitch100parts = reader.sint32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.roll100parts = reader.sint32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.yaw100parts = reader.sint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Recording {
    return {
      seconds2025: isSet(object.seconds2025) ? globalThis.Number(object.seconds2025) : undefined,
      gyroX10parts: isSet(object.gyroX10parts) ? globalThis.Number(object.gyroX10parts) : undefined,
      gyroY10parts: isSet(object.gyroY10parts) ? globalThis.Number(object.gyroY10parts) : undefined,
      gyroZ10parts: isSet(object.gyroZ10parts) ? globalThis.Number(object.gyroZ10parts) : undefined,
      accelX100parts: isSet(object.accelX100parts) ? globalThis.Number(object.accelX100parts) : undefined,
      accelY100parts: isSet(object.accelY100parts) ? globalThis.Number(object.accelY100parts) : undefined,
      accelZ100parts: isSet(object.accelZ100parts) ? globalThis.Number(object.accelZ100parts) : undefined,
      magX10parts: isSet(object.magX10parts) ? globalThis.Number(object.magX10parts) : undefined,
      magY10parts: isSet(object.magY10parts) ? globalThis.Number(object.magY10parts) : undefined,
      magZ10parts: isSet(object.magZ10parts) ? globalThis.Number(object.magZ10parts) : undefined,
      temperature10parts: isSet(object.temperature10parts) ? globalThis.Number(object.temperature10parts) : undefined,
      pressure100parts: isSet(object.pressure100parts) ? globalThis.Number(object.pressure100parts) : undefined,
      heading100parts: isSet(object.heading100parts) ? globalThis.Number(object.heading100parts) : undefined,
      pitch100parts: isSet(object.pitch100parts) ? globalThis.Number(object.pitch100parts) : undefined,
      roll100parts: isSet(object.roll100parts) ? globalThis.Number(object.roll100parts) : undefined,
      yaw100parts: isSet(object.yaw100parts) ? globalThis.Number(object.yaw100parts) : undefined,
    };
  },

  toJSON(message: Recording): unknown {
    const obj: any = {};
    if (message.seconds2025 !== undefined) {
      obj.seconds2025 = Math.round(message.seconds2025);
    }
    if (message.gyroX10parts !== undefined) {
      obj.gyroX10parts = Math.round(message.gyroX10parts);
    }
    if (message.gyroY10parts !== undefined) {
      obj.gyroY10parts = Math.round(message.gyroY10parts);
    }
    if (message.gyroZ10parts !== undefined) {
      obj.gyroZ10parts = Math.round(message.gyroZ10parts);
    }
    if (message.accelX100parts !== undefined) {
      obj.accelX100parts = Math.round(message.accelX100parts);
    }
    if (message.accelY100parts !== undefined) {
      obj.accelY100parts = Math.round(message.accelY100parts);
    }
    if (message.accelZ100parts !== undefined) {
      obj.accelZ100parts = Math.round(message.accelZ100parts);
    }
    if (message.magX10parts !== undefined) {
      obj.magX10parts = Math.round(message.magX10parts);
    }
    if (message.magY10parts !== undefined) {
      obj.magY10parts = Math.round(message.magY10parts);
    }
    if (message.magZ10parts !== undefined) {
      obj.magZ10parts = Math.round(message.magZ10parts);
    }
    if (message.temperature10parts !== undefined) {
      obj.temperature10parts = Math.round(message.temperature10parts);
    }
    if (message.pressure100parts !== undefined) {
      obj.pressure100parts = Math.round(message.pressure100parts);
    }
    if (message.heading100parts !== undefined) {
      obj.heading100parts = Math.round(message.heading100parts);
    }
    if (message.pitch100parts !== undefined) {
      obj.pitch100parts = Math.round(message.pitch100parts);
    }
    if (message.roll100parts !== undefined) {
      obj.roll100parts = Math.round(message.roll100parts);
    }
    if (message.yaw100parts !== undefined) {
      obj.yaw100parts = Math.round(message.yaw100parts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Recording>, I>>(base?: I): Recording {
    return Recording.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Recording>, I>>(object: I): Recording {
    const message = createBaseRecording();
    message.seconds2025 = object.seconds2025 ?? undefined;
    message.gyroX10parts = object.gyroX10parts ?? undefined;
    message.gyroY10parts = object.gyroY10parts ?? undefined;
    message.gyroZ10parts = object.gyroZ10parts ?? undefined;
    message.accelX100parts = object.accelX100parts ?? undefined;
    message.accelY100parts = object.accelY100parts ?? undefined;
    message.accelZ100parts = object.accelZ100parts ?? undefined;
    message.magX10parts = object.magX10parts ?? undefined;
    message.magY10parts = object.magY10parts ?? undefined;
    message.magZ10parts = object.magZ10parts ?? undefined;
    message.temperature10parts = object.temperature10parts ?? undefined;
    message.pressure100parts = object.pressure100parts ?? undefined;
    message.heading100parts = object.heading100parts ?? undefined;
    message.pitch100parts = object.pitch100parts ?? undefined;
    message.roll100parts = object.roll100parts ?? undefined;
    message.yaw100parts = object.yaw100parts ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
